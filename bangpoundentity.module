<?php
/**
 * @file
 * Code for the bangpoundentity feature.
 */

/**
 * Implement hook_contextual_links_view_alter().
 */
function bangpoundentity_contextual_links_view_alter(&$element, &$items) {

  // Revise contextual link for display fields.
  if (isset($element['#element']['#view_mode']) && isset($element['#links']['field-ui-display'])) {
    $view_mode = $element['#element']['#view_mode'];
    $entity_info = entity_get_info($element['#element']['#entity_type']);
    if ($entity_info['view modes'][$view_mode]) {
      $settings = field_view_mode_settings($element['#element']['#entity_type'], $element['#element']['#bundle']);
      if (isset($settings[$view_mode]) && $settings[$view_mode]['custom_settings']) {
        $element['#links']['field-ui-display']['title'] =  t('Manage %view_mode display', array('%view_mode' => $entity_info['view modes'][$view_mode]['label']));
        $element['#links']['field-ui-display']['href'] .= '/'. $view_mode;
        $element['#links']['field-ui-display']['html'] = TRUE;
      }
    }
  }
}

/**
 * Implement hook_menu().
 */
function bangpoundentity_menu() {
  $items = array();
  $infos = entity_get_info();
  foreach ($infos['node']['view modes'] as $view_mode => $settings) {
    $items['node/%node/view/'. $view_mode] = array(
      'title' => $settings['label'],
      'type' => $view_mode == 'full' ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK,
      'page callback' => 'bangpoundentity_node_page_view',
      'page arguments' => array(1, 3),
      'file' => 'bangpoundentity.pages.inc',
      'access callback' => 'user_access',
      'access arguments' => array('administer content types'),
    );
  }
  return $items;
}

/**
 * Implement hook_menu_alter().
 */
function bangpoundentity_menu_alter(&$items) {
  if (module_exists('field_ui')) {
    foreach (entity_get_info() as $entity_type => $entity_info) {
      if ($entity_info['fieldable']) {
        foreach ($entity_info['bundles'] as $bundle_name => $bundle_info) {
          if (isset($bundle_info['admin'])) {
            // Extract path information from the bundle.
            $path = $bundle_info['admin']['path'];
            $items[$path .'/fields']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
            $items[$path .'/display']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
          }
        }
      }
    }
  }
}

/**
 * Implement hook_entity_view_alter().
 *
 * Contextual links are added after hook_node_view() in node_view(), so
 * use hook_entity_view_alter() to add the node's links.
 */
function bangpoundentity_entity_view_alter(&$build, $type) {
  if (!empty($build['#entity_view_mode'])) {
    extract($build['#entity_view_mode']);

    // Avoid adding suggestions for lone bundles and default view modes.
    $info = entity_get_info($entity_type);
    $settings = field_view_mode_settings($entity_type, $bundle);

    if (isset($info['bundles'][$bundle]['admin']['bundle argument'])) {
      $path = implode('/', array_slice(explode('/', $info['bundles'][$bundle]['admin']['path']), 0, $info['bundles'][$bundle]['admin']['path'] - 1));
    }
    else {
      $path = $info['bundles'][$bundle]['admin']['path'];
    }
    if (!empty($id) && !empty($path)) {

      // Field UI doesn't provide its own contextual links, so we pretend to be
      // Field UI. This could backfire.

      if (isset($info['bundles'][$bundle]['admin']['bundle argument'])) {
        $build['#contextual_links']['field_ui'] = array($path, array($bundle));
      }
      else {
        $build['#contextual_links']['field_ui'] = array($path, array());
      }
    }
  }
}

/**
 * Implementation of hook_entity_info_alter()
 */
function bangpoundentity_entity_info_alter(&$entity_info) {

  $entity_info['node']['view modes']['title_list_item'] = array(
    'label' => t('Title list item'),
    'custom settings' => TRUE,
  );
}

/**
 * Implement hook_theme().
 */
function bangpoundentity_theme($existing, $type, $theme, $path) {
  return array(
    'node__title_list_item' => array(
      'render element' => 'elements',
      'template' => 'node--title-list-item',

      // For entity view mode themes.
      'override preprocess functions' => TRUE,
      'override process functions' => TRUE,
    ),
  );
}

/**
 * Implement hook_theme_registry_alter().
 */
function bangpoundentity_theme_registry_alter(&$theme_registry) {

  // Copy node theme to node__title_list_item.
  $info = $theme_registry['node'];

  $theme_registry['node__title_list_item']['preprocess functions'] = $info['preprocess functions'];
  $theme_registry['node__title_list_item']['process functions'] = $info['process functions'];
}

/**
 * Implement hook_preprocess_node().
 */
function bangpoundentity_preprocess_node(&$variables) {
  if ($variables['view_mode'] == 'title_list_item') {
    $variables['theme_hook_suggestion'] = 'node__title_list_item';

    // Add comment count to link title as in node_title_list().
    $node = $variables['node'];
    if (!empty($node->comment_count)) {
      $variables['title_attributes_array']['title'] = format_plural($node->comment_count, '1 comment', '@count comments');
    }
  }
}

/**
 * Implement hook_process_node().
 */
function bangpoundentity_process_node(&$variables) {
  if ($variables['view_mode'] == 'title_list_item') {
    $variables['wrapper'] = !empty($variables['title_prefix']) | !empty($variables['title_suffix']);
  }
}

<?php
/**
 * @file
 * Code for the bangpoundentity feature.
 */

/**
 * Implement hook_contextual_links_view_alter().
 */
function bangpoundentity_contextual_links_view_alter(&$element, &$items) {

  // Revise contextual link for display fields.
  if (isset($element['#element']['#view_mode']) && isset($element['#links']['field-ui-display'])) {
    $view_mode = $element['#element']['#view_mode'];
    $entity_info = entity_get_info($element['#element']['#entity_type']);
    $settings = field_view_mode_settings($element['#element']['#entity_type'], $element['#element']['#bundle']);
    if (isset($settings[$view_mode]) && $settings[$view_mode]['custom_settings']) {
      $element['#links']['field-ui-display']['title'] =  t('Manage %view_mode display', array('%view_mode' => $entity_info['view modes'][$view_mode]['label']));
      $element['#links']['field-ui-display']['href'] .= '/'. $view_mode;
      $element['#links']['field-ui-display']['html'] = TRUE;
    }
  }
}

/**
 * Implement hook_menu_alter().
 */
function bangpoundentity_menu_alter(&$items) {
  if (module_exists('field_ui')) {
    foreach (entity_get_info() as $entity_type => $entity_info) {
      if ($entity_info['fieldable']) {
        foreach ($entity_info['bundles'] as $bundle_name => $bundle_info) {
          if (isset($bundle_info['admin'])) {
            // Extract path information from the bundle.
            $path = $bundle_info['admin']['path'];
            $items[$path .'/fields']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
            $items[$path .'/display']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
          }
        }
      }
    }
  }
}

/**
 * Implement hook_entity_view_alter().
 *
 * Contextual links are added after hook_node_view() in node_view(), so
 * use hook_entity_view_alter() to add the node's links.
 */
function bangpoundentity_entity_view_alter(&$build, $type) {
  $hook = $build['#theme'];
  $hooks = theme_get_registry(FALSE);
  $entity_key = $hooks[$hook]['entity key'];

  if (!empty($entity_key)) {
    $entity = $build[$entity_key];
    $entity_type = $build['#entity_type'];
    $view_mode = $build['#view_mode'];

    list($id, , $bundle) = entity_extract_ids($entity_type, $entity);

    // Avoid adding suggestions for lone bundles and default view modes.
    $info = entity_get_info($entity_type);
    $settings = field_view_mode_settings($entity_type, $bundle);

    if (isset($info['bundles'][$bundle]['admin']['bundle argument'])) {
      $path = implode('/', array_slice(explode('/', $info['bundles'][$bundle]['admin']['path']), 0, $info['bundles'][$bundle]['admin']['path'] - 1));
    }
    else {
      $path = $info['bundles'][$bundle]['admin']['path'];
    }
    if (!empty($id) && !empty($path)) {

      // Field UI doesn't provide its own contextual links, so we pretend to be
      // Field UI. This could backfire.

      if (isset($info['bundles'][$bundle]['admin']['bundle argument'])) {
        $build['#contextual_links']['field_ui'] = array($path, array($bundle));
      }
      else {
        $build['#contextual_links']['field_ui'] = array($path, array());
      }
    }
  }
}

/**
 * Implementation of hook_entity_info_alter()
 */
function bangpoundentity_entity_info_alter(&$entity_info) {

  $entity_info['node']['view modes']['title_list_item'] = array(
    'label' => t('Title list item'),
    'custom settings' => TRUE,
  );
}

function bangpoundentity_theme($existing, $type, $theme, $path) {
  return array(
    'node__title_list_item' => array(
      'render element' => 'elements',
      'template' => 'node--title-list-item',

      // For entity view mode themes.
      'entity key' => '#node',
      'override preprocess functions' => TRUE,
      'override process functions' => TRUE,
    ),
  );
}

/**
 * Implement hook_theme_registry_alter().
 *
 * There's no consistent way to find an entity in the theme stack. To avoid conflicts, all
 * entity themes in the registry are annotated with the name of the entity's key in the
 * render element array. The preprocess function is only added to specific theme entities.
 *
 * Currently all entities are themed with a render element instead of variables.
 * field_attach_view() adds entity type and bundle info to the render elements.
 */
function bangpoundentity_theme_registry_alter(&$theme_registry) {
  // Overload theme registry with property name of entity in render element or variables.
  $entity_themes = array(

    // Node and user module are required, so these themes are always present.
    'node' => '#node',
    'user_profile' => '#account',

    // These entity themes are optional core or contrib.
    'comment' => '#comment',
    'entity' => '#entity',
    'fieldable_panels_pane' => '#element',
    'file_entity' => '#file',
    'taxonomy_term' => '#term',
  );

  foreach ($entity_themes as $hook => $entity_key) {
    if (isset($theme_registry[$hook])) {
      $theme_registry[$hook]['entity key'] = $entity_key;
      $theme_registry[$hook]['preprocess functions'][] = 'bangpoundentity_template_suggest_view_mode';
    }
  }

  // Copy node theme to node__title_list_item.
  $info = $theme_registry['node'];

  $theme_registry['node__title_list_item']['preprocess functions'] = $info['preprocess functions'];
  $theme_registry['node__title_list_item']['process functions'] = $info['process functions'];
}

function bangpoundentity_preprocess_node(&$variables) {
  if ($variables['view_mode'] == 'title_list_item') {
    $variables['theme_hook_suggestion'] = 'node__title_list_item';
  }
}

/**
 * Implement hook_preprocess().
 *
 * @todo add this to supported theme functions in registry.
 * @see entity_view_mode.module
 */
function bangpoundentity_template_suggest_view_mode(&$variables, $hook) {

  $hooks = theme_get_registry(FALSE);
  $entity_key = $hooks[$hook]['entity key'];
  $render_element = $variables[$hooks[$hook]['render element']];
  $entity = $render_element[$entity_key];
  $entity_type = $render_element['#entity_type'];
  $view_mode = $render_element['#view_mode'];

  $suggestions = &$variables['theme_hook_suggestions'];
  list($id, , $bundle) = entity_extract_ids($entity_type, $entity);

  // Avoid adding suggestions for lone bundles and default view modes.
  $info = entity_get_info($entity_type);
  $settings = field_view_mode_settings($entity_type, $bundle);

  // Ensure the base suggestions exist and if not, add them.
  if (!empty($info['entity keys']['bundle']) && !in_array("{$entity_type}__{$bundle}", $suggestions)) {
    // The entity-type__bundle suggestion is typically "first".
    array_unshift($suggestions, "{$entity_type}__{$bundle}");
  }
  if (!in_array("{$entity_type}__{$id}", $suggestions)) {
    // The entity-type__id suggestion is always "last".
    array_push($suggestions, "{$entity_type}__{$id}");
  }

  if (isset($settings[$view_mode]) && $settings[$view_mode]['custom_settings']) {
    // Add view mode suggestions based on the location of the base suggestions.
    if (!in_array("{$entity_type}__{$view_mode}", $suggestions)) {
      array_unshift($suggestions, "{$entity_type}__{$view_mode}");
    }
    if (!empty($info['entity keys']['bundle']) && !in_array("{$entity_type}__{$bundle}__{$view_mode}", $suggestions)) {
      $index = array_search("{$entity_type}__{$bundle}", $suggestions);
      array_splice($suggestions, $index + 1, 0, "{$entity_type}__{$bundle}__{$view_mode}");
    }
    if (!in_array("{$entity_type}__{$id}__{$view_mode}", $suggestions)) {
      $index = array_search("{$entity_type}__{$id}", $suggestions);
      array_splice($suggestions, $index + 1, 0, "{$entity_type}__{$id}__{$view_mode}");
    }
  }
}
